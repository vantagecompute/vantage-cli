"""patch the subscription table based in the subscription based product on the AWS Marketplace

Revision ID: 6d0a7a4ce67e
Revises: efb840bd688d
Create Date: 2024-03-05 14:14:12.315285

File generated by Matheus Tosta <matheus@omnivector.solutions>.

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "6d0a7a4ce67e"
down_revision = "efb840bd688d"
branch_labels = None
depends_on = None


# Define the metadatate
metadata = sa.MetaData()

# Define the tables
pending_aws_subscriptions = sa.Table(
    "pending_aws_subscriptions",
    metadata,
    sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    sa.Column("organization_id", sa.String(), nullable=False),
    sa.Column("customer_aws_account_id", sa.String(), nullable=False, unique=True),
    sa.Column("customer_identifier", sa.String(), nullable=False, unique=True),
    sa.Column("product_code", sa.String(), nullable=False),
    sa.Column("has_failed", sa.Boolean(), nullable=False, server_default="false"),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
    sa.PrimaryKeyConstraint("id"),
)

organization_free_trials = sa.Table(
    "organization_free_trials",
    metadata,
    sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    sa.Column("organization_id", sa.String(), nullable=False),
    sa.PrimaryKeyConstraint("id"),
)


# Create the tables
def upgrade():
    conn = op.get_bind()

    # add column "is_free_trial" to subscription table. The column is boolean and not nullable
    op.add_column(
        "subscription", sa.Column("is_free_trial", sa.Boolean(), nullable=False, server_default="false")
    )

    # delete rows that have the column ended_at different of None
    conn.execute(sa.text("DELETE FROM subscription WHERE ended_at IS NOT NULL"))

    # drop column "ended_at" from subscription table
    op.drop_column("subscription", "ended_at")

    # delete the subscription row that was created in revision efb840bd688d
    conn.execute(sa.text("DELETE FROM subscription WHERE id = 1"))

    # create tables
    for table in [pending_aws_subscriptions, organization_free_trials]:
        op.create_table(
            table.name,
            *table.columns,
        )

    # create indexes for better searching in relation to the organization_id
    op.create_index(
        op.f("ix_pending_aws_subscriptions_organization_id"),
        "pending_aws_subscriptions",
        ["organization_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_organization_free_trials_organization_id"),
        "organization_free_trials",
        ["organization_id"],
        unique=False,
    )

    # add columns "clusters" and "storage_systems" to the subscription_tier table
    op.add_column("subscription_tier", sa.Column("clusters", sa.Integer(), nullable=True))
    op.add_column("subscription_tier", sa.Column("storage_systems", sa.Integer(), nullable=True))

    # remove the row from the subscription_tier table whose name is "free_trial"
    conn.execute(sa.text("DELETE FROM subscription_tier WHERE name = 'free_trial'"))

    # modify the row from the subscription_tier table where the name is basic and patch the name to "starter"
    conn.execute(sa.text("UPDATE subscription_tier SET name = 'starter' WHERE name = 'basic'"))

    # update the subscription_tier table where the name is "starter" and set the columns "clusters" and "storage_systems" to 2, and the column "seats" to 5
    conn.execute(
        sa.text(
            "UPDATE subscription_tier SET clusters = 2, storage_systems = 2, seats = 5 WHERE name = 'starter'"
        )
    )

    # update the subscription_tier table where the name is "teams" and set the columns "clusters" and "storage_systems" to 10, and the column "seats" to 20
    conn.execute(
        sa.text(
            "UPDATE subscription_tier SET clusters = 10, storage_systems = 10, seats = 20 WHERE name = 'teams'"
        )
    )

    # update the subscription_tier table where the name is "pro" and set the columns "clusters" and "storage_systems" to 20, and the column "seats" to 50
    conn.execute(
        sa.text(
            "UPDATE subscription_tier SET clusters = 20, storage_systems = 20, seats = 50 WHERE name = 'pro'"
        )
    )


def downgrade():
    # rollback all operations done by the upgrade function
    conn = op.get_bind()

    # delete the rows from the organization_free_trials table
    conn.execute(sa.text("DELETE FROM organization_free_trials"))

    # delete the rows from the pending_aws_subscriptions table
    conn.execute(sa.text("DELETE FROM pending_aws_subscriptions"))

    # delete the columns "clusters" and "storage_systems" from the subscription_tier table
    op.drop_column("subscription_tier", "clusters")
    op.drop_column("subscription_tier", "storage_systems")

    # add the row to the subscription_tier table whose name is "free_trial"
    conn.execute(sa.text("INSERT INTO subscription_tier (name, seats) VALUES ('free_trial', NULL)"))

    # modify the row from the subscription_tier table where the name is starter and patch the name to "basic"
    conn.execute(sa.text("UPDATE subscription_tier SET name = 'basic' WHERE name = 'starter'"))

    # update the subscription_tier table where the name is "basic" and set the column "seats" to 5
    conn.execute(sa.text("UPDATE subscription_tier SET seats = 5 WHERE name = 'basic'"))

    # update the subscription_tier table where the name is "teams" and set the column "seats" to 10
    conn.execute(sa.text("UPDATE subscription_tier SET seats = 10 WHERE name = 'teams'"))

    # update the subscription_tier table where the name is "pro" and set the column "seats" to 20
    conn.execute(sa.text("UPDATE subscription_tier SET seats = 20 WHERE name = 'pro'"))

    # delete the indexes created in the upgrade function
    op.drop_index(op.f("ix_organization_free_trials_organization_id"), table_name="organization_free_trials")
    op.drop_index(
        op.f("ix_pending_aws_subscriptions_organization_id"), table_name="pending_aws_subscriptions"
    )

    # delete the tables created in the upgrade function
    op.drop_table("organization_free_trials")
    op.drop_table("pending_aws_subscriptions")

    # delete the column "is_free_trial" from the subscription table
    op.drop_column("subscription", "is_free_trial")

    # add column "ended_at" to subscription table. The column is datetime and nullable
    op.add_column("subscription", sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True))
