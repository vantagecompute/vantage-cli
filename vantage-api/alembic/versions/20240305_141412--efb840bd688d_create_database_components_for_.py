"""create database components for subscriptions

Revision ID: efb840bd688d
Revises: 5d31f6787421
Create Date: 2024-03-05 14:14:12.315285

File auto generated by Alembic and modified by Matheus Tosta <matheus@omnivector.solutions>.

"""
import json
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSONB


# revision identifiers, used by Alembic.
revision = "efb840bd688d"
down_revision = "5d31f6787421"
branch_labels = None
depends_on = None


# Define the metadata
metadata = sa.MetaData()

# Define the tables
subscription_tier = sa.Table(
    "subscription_tier",
    metadata,
    sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    sa.Column("name", sa.String(), nullable=False, unique=True),
    sa.Column("seats", sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint("id"),
)

subscription_type = sa.Table(
    "subscription_type",
    metadata,
    sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    sa.Column("name", sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint("id"),
)

subscription = sa.Table(
    "subscription",
    metadata,
    sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    sa.Column("organization_id", sa.String(), nullable=False),
    sa.Column("type_id", sa.Integer(), nullable=False),
    sa.Column("tier_id", sa.Integer(), nullable=False),
    sa.Column("detail_data", JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
    sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(["tier_id"], ["subscription_tier.id"], ondelete="CASCADE"),
    sa.ForeignKeyConstraint(["type_id"], ["subscription_type.id"], ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id"),
)


# Create the tables
def upgrade():
    for table in [subscription_tier, subscription_type, subscription]:
        op.create_table(
            table.name,
            *table.columns,
        )

    op.create_index(
        op.f("ix_subscription_organization_id"), "subscription", ["organization_id"], unique=False
    )

    # populate with fixed values for tiers and types
    op.bulk_insert(
        subscription_tier,
        [
            {"name": "free_trial", "seats": None},
            {"name": "basic", "seats": 5},
            {"name": "teams", "seats": 10},
            {"name": "pro", "seats": 20},
            {"name": "enterprise", "seats": None},
        ],
    )
    op.bulk_insert(
        subscription_type,
        [
            {"name": "cloud"},
            {"name": "aws"},
        ],
    )

    # get name of current database
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    database_name = inspector.engine.url.database
    assert isinstance(database_name, str), f"database_name is expected as str, received {type(database_name)}"

    # fetch free trial tier id and cloud type id
    free_trial_tier_id = conn.execute(
        sa.text("SELECT id FROM subscription_tier WHERE name = 'free_trial'")
    ).fetchone()[0]
    cloud_type_id = conn.execute(sa.text("SELECT id FROM subscription_type WHERE name = 'cloud'")).fetchone()[
        0
    ]

    # create a free trial subscription in the current database
    query = sa.text(
        "INSERT INTO subscription (organization_id, type_id, tier_id, detail_data, expires_at) "
        "VALUES (:organization_id, :type_id, :tier_id, :detail_data, now() + interval '30 days')"
    )
    conn.execute(
        query,
        organization_id=database_name,
        type_id=cloud_type_id,
        tier_id=free_trial_tier_id,
        detail_data=json.dumps({}),
    )


def downgrade():
    op.drop_table("subscription_type")
    op.drop_table("subscription_tier")
    op.drop_index(op.f("ix_subscription_organization_id"), table_name="subscription")
    op.drop_table("subscription")
