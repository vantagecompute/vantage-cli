name: Update Documentation

on:
  push:
    branches: ["main"]
    paths:
      - 'vantage_cli/**'
      - 'scripts/generate_complete_docs.py'
      - 'scripts/update_docs_version.py'
      - 'pyproject.toml'
      - 'docusaurus/**'
  
  workflow_dispatch:

concurrency:
  group: "update-docs"
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-24.04
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: docusaurus/yarn.lock

      - name: Install just
        run: sudo snap install just --classic

      - name: Install UV
        run: sudo snap install astral-uv --classic

      - name: Configure Git
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Inputs
          BASE_BRANCH="main"
          BRANCH_NAME="docs/auto-update-$(date +%Y%m%d-%H%M%S)"
          
          # Ensure we have the full picture from origin
          git fetch origin --prune
          
          # Verify base branch exists on remote
          if ! git ls-remote --exit-code --heads origin "${BASE_BRANCH}" >/dev/null 2>&1; then
            echo "❌ Base branch '${BASE_BRANCH}' does not exist on origin." >&2
            exit 1
          fi
          
          # Create a clean working tree based on the remote base
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}"
          
          # Create/update the working branch from base
          git switch -C "${BRANCH_NAME}"   

          echo "Generating updated CLI documentation..."
          python3 scripts/generate_complete_docs.py
          python3 scripts/update_docs_version.py

          echo "Building Docusaurus documentation..."
          just docs-build

          # Stage only what you intend to include
          git add docusaurus/ || true
          
          # If nothing to commit, bail out gracefully (no PR needed)
          if git diff --cached --quiet; then
            echo "ℹ️ No changes detected in 'docusaurus/'. Skipping PR."
            echo "PR_URL=" >> "$GITHUB_ENV"
            exit 0
          fi
          
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "docs: auto-update generated documentation
          
          - Updated CLI command documentation
          - Regenerated Docusaurus build files
          - Updated version information
          
          Auto-generated by GitHub Actions"
          
          # Push branch to origin (required before creating PR)
          git push -u origin "${BRANCH_NAME}"

          PR_URL=$(gh pr create \
            --base docs \
            --head "$BRANCH_NAME" \
            --title "docs: auto-update generated documentation" \
            --body "🤖 **Automated Documentation Update**
          
          This PR contains automatically generated documentation updates:
          
          - ✅ Updated CLI command documentation
          - ✅ Regenerated Docusaurus build files  
          - ✅ Updated version information
          
          > This PR was created and will be auto-merged by GitHub Actions")
          
          status=$?
          set -e
          
          # If PR already exists, fetch its URL instead of failing the job
          if [ $status -ne 0 ]; then
            echo "ℹ️ Create PR failed (likely exists). Attempting to fetch existing PR URL…"
            PR_URL="$(gh pr view --head "${BRANCH_NAME}" --json url -q .url || true)"
          fi
          
          if [ -z "${PR_URL}" ]; then
            echo "❌ Could not create or find the PR." >&2
            exit 1
          fi
          
          echo "✅ PR: ${PR_URL}"
          echo "PR_URL=${PR_URL}" >> "$GITHUB_ENV"

      - name: Auto-merge Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait a moment for PR to be fully created
          sleep 5
          
          # Auto-merge the PR
          gh pr merge "$PR_URL" --squash --auto
          
          echo "✅ PR created and set to auto-merge: $PR_URL"

      - name: No changes detected
        if: steps.check_changes.outputs.changes == 'false'
        run: |
          echo "✅ Documentation is already up to date"